
ملاحظة (((((انسة الكتابة ممكن تقلب لان ما عندي وورد اذا لقتيها بالمقلوب بس عمليright to left reading order بيمشي الحال )))))

توصيف الحالة :
نمثل اللعبة لرقعة board ابعادها n*n و تحوي خلايا فارغة blanc و خلايا بيضاء white و خلايا سوداء تمثل القطع المعدنية black و مغناطيسات بنفسجية نافرةpurble magnet و حمراء جاذبة red و بذلك يتم تمييز انواع الخلاياا بحيث يوجد class square تتمثل داخله الخلية باحداثيات x و y و نوع type و في ال class magnets يتم تحديد موقع المغناطيسات حسب النوع و الحركات الخاصة بها من الجذب و النفر و ال class state للحالات الخاصة بالرقعة  و ال class game للعب اللعبة و تطبيق خوارزميات البحث 

فضاء الحالة:
هو جميع الحالات الممكنة لتوضع المغناطيسات و الخلايا السوداء في الرقعة بحيث يمكن للمغناطيسات التواجد و الانتقال الى اي مكان في الرقعة عدا الاماكن التي تحوي الخلايا السوداء 
حيث تم تمثيل الرقعة ب list تحوي مجموعة من ال lists لتمثيل الصفوف العمودية و الافقية اما الحالات فيتم تخزينها عند تطبيق خوارزميات البحث في stack بالنسبة ل dfs لانها تتبع مبدأ 	LIFO   و في queue في bfs لانها تتبع مبدأ FIFO و يتم تخزين الخلايا المزارة في set اسمها visit منعا من التكرار الذي يزيد من وقت التنفيذ 

الحالة الابتدائية:
هي الرقعة الابتدائية التي يمكن ان يدخلها المستخدم او ان يختار الرقعة الافتراضية الموجودة في الكود و يتم الاختيار عند بدء اللعب و يتم تخزينها في المتغير currentState الذي ياخذ نسخة عنها لانه سيتم التعديل عليها خلال اللعب او خلال تطبيق الخوارزمية 

الاجراءات (العمليات):
عند لعب الuser للعبة فانه يتم ادخال الاحداثيات بالمكان المراد تحريك المغناطيس و نوعه و يقوم التابع move في ال classgame باخذ الاحداثيات  و تحريك المغناطيس و تبديل اماكن القطع و بحيث يتم معرفة نوع الخاية اللازم وضعها مكان المغناطيس بعد الحركة عن طريق التابع is white cell بحيث تم تخزين مواقع الخلايا البيضاء في list اسمها white cells و يتم ايضا في تابع move استدعاء التوابع attract و repel للجذب و النفر حسب نوع المغناطيس 
و في حالة حل اللعبة من قبل البرنامج يتم تطبيق خوارزميات ال bfs و ال dfs حسب الاختيار عند تشغيل الكود وساشرح عن كيفية تطبيقها بالتفصيل في اخر النص

الحالة النهائية:
عند لعب المستخدم للعبة هي حالة اللربح بحيث تكون بعدم بقاء اي خلايا بيضاء في الرقعة
عند حل البرنامج لها تكون لدينا حالة الربح ايضا عند التاكد من عدم وجود اي خلايا بيضاء متبقية و ذلك في تابع is goal 
و لدينا حالة عدم ايجاد حل no solution و ذلك بعد تجريب جميع الرقع و تنفيذ شروط اللعبة عليها من جذب و نفر وفحص للفوز و وصول لاخر حالة ممكنة و عدم ايجاد حل 

BFS & DFS :
التوابع الخاصة بهم موجودة في ال clas game حيث يتم  تحريك المغناطيسات لاخذ جميع الحالات و المرور على الرقع و الحالات المخزنة في ال stack في حالة ال dfs و ال queue في حالة ال bfs بعمل pop او popleft ويتم  اخذ اول رقعة اي اول حركة للمغناطيسات فحص تحقق حالة الربح بتابع is goal فاذا لم تكن حالة ربح اي لا يزال يوجد خلايا بيضاء في الرقعة يتم اضافتها الى ال visit و اخذ مجاورات  المغناطيس و نقله اليها بتابع ال get child الذي ياخذ التحركات للاعلى و الاسفل و اليمين و اليسار و تطبيق توابع الجذب و النفر حسب نوع المغناطيس و ايجاد الرقع الجديدة و تخزينها في list اسمها childrenو يتم من اجل كل رقعة child  اذا لم تكن مزارة اضافتها الى بنية المعطيات التي تخزن الحالات و اختبار شرط الفوز عليها و يتم تكرار تلك العمليات حتى تفرغ بنية اللمعطيات المستخدمة فاذا وجد الحل يتم طباعته وانهاء البحث و طباعة this is the win state و اذا تم اختبار جميع الحالات و لم يوجد الحل يتم التوقف و طباعة no solution   